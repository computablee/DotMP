/*
* DotMP - A collection of powerful abstractions for parallel programming in .NET with an OpenMP-like API. 
* Copyright (C) 2023 Phillip Allen Lane
*
* This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser
* General Public License as published by the Free Software Foundation; either version 2.1 of the License, or
* (at your option) any later version.
*
* This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the
* implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public
* License for more details.
*
* You should have received a copy of the GNU Lesser General Public License along with this library; if not,
* write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
*/

<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>
<# var letters = new char[] { 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'A', 'B', 'C', 'D', 'E', 'F' };
   int max = 13; #>

using System;
using System.Runtime.CompilerServices;

namespace DotMP.GPU
{
    /// <summary>
    /// The main class of DotMP's GPU API, powered by the ILGPU project.
    /// Contains all the main methods for constructing and running GPU kernels.
    /// The GPU API is not thread-safe at the current moment, so its methods should not be called from within a Parallel.ParallelRegion!
    /// </summary>
    public static class Parallel
    {
        /// <summary>
        /// Formats the caller information for determining uniqueness of a call.
        /// </summary>
        /// <param name="filename">The calling file.</param>
        /// <param name="linenum">The calling line number.</param>
        /// <returns>A formatted string representing "{filename}:{linenum}"</returns>
        private static string FormatCaller(string filename, int linenum)
        {
            return string.Format("{0}:{1}", filename, linenum);
        }

<# for (int c = 1; c <= max; c++) { #>
        /// <summary>
        /// Creates a GPU parallel for loop.
        /// The body of the kernel is run on a GPU target.
        /// </summary>
        /// <param name="start">The start of the loop, inclusive.</param>
        /// <param name="end">The end of the loop, exclusive.</param>
<# for (int i = 0; i < c; i++) { #>
        /// <param name="buf<#= i + 1 #>">Buffer #<#= i + 1 #> to run the kernel with.</param>
<# } #>
        /// <param name="action">The kernel to run on the GPU.</param>
        /// <param name="line">The line number this method was called from.</param>
        /// <param name="path">The path to the file this method was called from.</param>
        public static void ParallelFor<
<# for (int i = 0; i < c; i++) { #> <#= letters[i] + ((i != c - 1) ? "," : "") #> <# } #>
        >(int start, int end, 
<# for (int i = 0; i < c; i++) { #> Buffer<<#= letters[i] #>> buf<#= i + 1 #>, <# } #>
        Action<Index, 
<# for (int i = 0; i < c; i++) { #> GPUArray<<#= letters[i] #>><#= (i != c - 1) ? "," : "" #> <# } #>
        > action, [CallerFilePath] string path = "", [CallerLineNumber] int line = 0)
<# for (int i = 0; i < c; i++) { #> where <#= letters[i] #> : unmanaged <# } #>
        {
            var handler = new AcceleratorHandler();
            string src = FormatCaller(path, line);
            handler.DispatchKernel((start, end), 
<# for (int i = 0; i < c; i++) { #> buf<#= i + 1 #>, <# } #>
            action, src);
        }
<# } #>

<# for (int c = 1; c <= max - 1; c++) { #>
        /// <summary>
        /// Creates a GPU parallel for-reduction loop.
        /// The body of the kernel is run on a GPU target.
        /// For-reduction loops utilize a tree reduction to reduce down to a single value.
        /// </summary>
        /// <param name="start">The start of the loop, inclusive.</param>
        /// <param name="end">The end of the loop, exclusive.</param>
<# for (int i = 0; i < c; i++) { #>
        /// <param name="buf<#= i + 1 #>">Buffer #<#= i + 1 #> to run the kernel with.</param>
<# } #>
        /// <param name="action">The kernel to run on the GPU.</param>
        /// <param name="line">The line number this method was called from.</param>
        /// <param name="path">The path to the file this method was called from.</param>
        public static void ParallelFor<R, 
<# for (int i = 0; i < c; i++) { #> <#= letters[i] + ((i != c - 1) ? "," : "") #> <# } #>
        >(int start, int end, ref R reduce_to,
<# for (int i = 0; i < c; i++) { #> Buffer<<#= letters[i] #>> buf<#= i + 1 #>, <# } #>
        Action<GPUScalar<R>, Index, 
<# for (int i = 0; i < c; i++) { #> GPUArray<<#= letters[i] #>><#= (i != c - 1) ? "," : "" #> <# } #>
        > action, [CallerFilePath] string path = "", [CallerLineNumber] int line = 0)
<# for (int i = 0; i < c; i++) { #> where <#= letters[i] #> : unmanaged <# } #>
            where R : unmanaged
        {
            var handler = new AcceleratorHandler();
            string src = FormatCaller(path, line);
            handler.DispatchKernel((start, end), ref reduce_to,
<# for (int i = 0; i < c; i++) { #> buf<#= i + 1 #>, <# } #>
            action, src);
        }
<# } #>

<# for (int c = 1; c <= max - 1; c++) { #>
        /// <summary>
        /// Creates a collapsed GPU parallel for loop.
        /// The body of the kernel is run on a GPU target.
        /// </summary>
        /// <param name="range1">The range of the outer for loop.</param>
        /// <param name="range2">The range of the inner for loop.</param>
<# for (int i = 0; i < c; i++) { #>
        /// <param name="buf<#= i + 1 #>">Buffer #<#= i + 1 #> to run the kernel with.</param>
<# } #>
        /// <param name="action">The kernel to run on the GPU.</param>
        /// <param name="line">The line number this method was called from.</param>
        /// <param name="path">The path to the file this method was called from.</param>
        public static void ParallelForCollapse<
<# for (int i = 0; i < c; i++) { #> <#= letters[i] + ((i != c - 1) ? "," : "") #> <# } #>
        >((int, int) range1, (int, int) range2, 
<# for (int i = 0; i < c; i++) { #> Buffer<<#= letters[i] #>> buf<#= i + 1 #>, <# } #>
        Action<Index, Index,
<# for (int i = 0; i < c; i++) { #> GPUArray<<#= letters[i] #>><#= (i != c - 1) ? "," : "" #> <# } #>
        > action, [CallerFilePath] string path = "", [CallerLineNumber] int line = 0)
<# for (int i = 0; i < c; i++) { #>
            where <#= letters[i] #> : unmanaged
<# } #>
        {
            var handler = new AcceleratorHandler();
            string src = FormatCaller(path, line);
            handler.DispatchKernel(range1, range2, 
<# for (int i = 0; i < c; i++) { #> buf<#= i + 1 #>, <# } #>
            action, src);
        }
<# } #>

<# for (int c = 1; c <= max - 2; c++) { #>
        /// <summary>
        /// Creates a collapsed GPU parallel for loop.
        /// The body of the kernel is run on a GPU target.
        /// </summary>
        /// <param name="range1">The range of the outer for loop.</param>
        /// <param name="range2">The range of the middle for loop.</param>
        /// <param name="range3">The range of the inner for loop.</param>
<# for (int i = 0; i < c; i++) { #>
        /// <param name="buf<#= i + 1 #>">Buffer #<#= i + 1 #> to run the kernel with.</param>
<# } #>
        /// <param name="action">The kernel to run on the GPU.</param>
        /// <param name="line">The line number this method was called from.</param>
        /// <param name="path">The path to the file this method was called from.</param>
        public static void ParallelForCollapse<
<# for (int i = 0; i < c; i++) { #> <#= letters[i] + ((i != c - 1) ? "," : "") #> <# } #>
        >((int, int) range1, (int, int) range2, (int, int) range3,
<# for (int i = 0; i < c; i++) { #> Buffer<<#= letters[i] #>> buf<#= i + 1 #>, <# } #>
        Action<Index, Index, Index,
<# for (int i = 0; i < c; i++) { #> GPUArray<<#= letters[i] #>><#= (i != c - 1) ? "," : "" #> <# } #>
        > action, [CallerFilePath] string path = "", [CallerLineNumber] int line = 0)
<# for (int i = 0; i < c; i++) { #>
            where <#= letters[i] #> : unmanaged
<# } #>
        {
            var handler = new AcceleratorHandler();
            string src = FormatCaller(path, line);
            handler.DispatchKernel(range1, range2, range3, 
<# for (int i = 0; i < c; i++) { #> buf<#= i + 1 #>, <# } #>
            action, src);
        }
<# } #>
    }
}
